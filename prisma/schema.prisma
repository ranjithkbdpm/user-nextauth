// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }


// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}



// model
// role constants
enum Role {
  USER
  ADMIN
}


// register user model
  model User {
    id                String       @id @default(uuid())
    firstname         String?      @db.VarChar(255) 
    lastname          String?      @db.VarChar(255)
    name              String? 
    email             String       @unique 
    emailVerified     DateTime?
    createdAt         DateTime?    @default(now()) 
    phonenumber       String?      @db.VarChar(20)
    password          String?      //make this optional since we are using OAuth
    role              Role?         @default(USER) 
    isActive          Boolean?     @default(true) 
    image             String?
    accounts          Account[]
    session           Session[]
    profile           Profile[] 
  }

  // profile
  model Profile {
    id            String    @id @default(uuid())
    address       String
    profileId     String    @unique
    user          User      @relation(fields: [profileId], references: [id])
  }

  // //account
  // model Account {
  // id                  Int       @id @default(autoincrement())
  // userId              Int    
  // type                String
  // provider            String
  // providerAccountId   String
  // refreshToken        String?   @db.Text
  // // Relation to User
  // user                User      @relation(fields: [userId], references: [id])
  // }

model Account {
  id                 String   @id @default(uuid())
  userId             String
  provider           String
  providerAccountId  String
  type               String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

  // session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// email verification model
model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

    
 
